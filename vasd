GRAPH COLORING


#include <bits/stdc++.h>
using namespace std;
#define V 4
void printSolution(int color[]);
bool isSafe(bool graph[V][V], int color[])
{
	for (int i = 0; i < V; i++)
		for (int j = i + 1; j < V; j++)
			if (graph[i][j] && color[j] == color[i])
				return false;
	return true;
}
bool graphColoring(bool graph[V][V], int m, int i,
				int color[V])
{
	if (i == V) {
		if (isSafe(graph, color)) {
			printSolution(color);
			return true;
		}
		return false;
	}
	for (int j = 1; j <= m; j++) {
		color[i] = j;
		if (graphColoring(graph, m, i + 1, color))
			return true;
		color[i] = 0;
	}
	return false;
}
void printSolution(int color[])
{
	cout << "Solution Exists:"
			" Following are the assigned colors \n";
	for (int i = 0; i < V; i++)
		cout << " " << color[i];
	cout << "\n";
}
int main()
{	bool graph[V][V] = {
		{ 0, 1, 1, 1 },
		{ 1, 0, 1, 0 },
		{ 1, 1, 0, 1 },
		{ 1, 0, 1, 0 },
	};
	int m = 3;
	int color[V];
	for (int i = 0; i < V; i++)
		color[i] = 0;
	if (!graphColoring(graph, m, 0, color))
		cout << "Solution does not exist";
	return 0;
}






Sum of subset


#include <iostream>

using namespace std;

#define ARRAYSIZE(a) (sizeof(a))/(sizeof(a[0]))

static int total_nodes;

void printSubset(int A[], int size)
{
    for(int i = 0; i < size; i++)
    {
        cout << " " << A[i];
    }
    cout << "\n";
}

int comparator(const void *pLhs, const void *pRhs)
{
    int *lhs = (int *)pLhs;
    int *rhs = (int *)pRhs;
    return *lhs > *rhs;
}

void subset_sum(int s[], int t[],
                int s_size, int t_size,
                int sum, int ite,
                int const target_sum)
{
    total_nodes++;
    if( target_sum == sum )
    {
        printSubset(t, t_size);
        if( ite + 1 < s_size && sum - s[ite] + s[ite + 1] <= target_sum )
        {
            subset_sum(s, t, s_size, t_size - 1, sum - s[ite], ite + 1, target_sum);
        }
        return;
    }
    else
    {
        if( ite < s_size && sum + s[ite] <= target_sum )
        {
            for( int i = ite; i < s_size; i++ )
            {
                t[t_size] = s[i];
                if( sum + s[i] <= target_sum )
                {
                    subset_sum(s, t, s_size, t_size + 1, sum + s[i], i + 1, target_sum);
                }
            }
        }
    }
}

void generateSubsets(int s[], int size, int target_sum)
{
    int *tuplet_vector = new int[size];
    int total = 0;
    for( int i = 0; i < size; i++ )
    {
        total += s[i];
    }
    if( s[0] <= target_sum && total >= target_sum )
    {
        qsort(s, size, sizeof(int), &comparator);
        subset_sum(s, tuplet_vector, size, 0, 0, 0, target_sum);
    }
    delete[] tuplet_vector;
}

int main()
{
    int weights[] = {15, 22, 14, 26, 32, 9, 16, 8};
    int target = 53;
    int size = ARRAYSIZE(weights);
    generateSubsets(weights, size, target);
    cout << "Nodes generated " << total_nodes;
    return 0;
}







n queen


#include <iostream>
using namespace std;
void print_board(int queens[], int n) {
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            if (queens[i] == j) {
                cout << "Q ";
            } else {
                cout << ". ";
            }
        }
        cout << endl;
    }
}
void solve_n_queens(int queens[], int row, int n) {
    if (row == n) {
        print_board(queens, n);
        cout << endl;
        return;
    }
    for (int col = 0; col < n; col++) {
        bool is_safe = true;
        for (int i = 0; i < row; i++) {
            int diff = abs(queens[i] - col);
            if (queens[i] == col || diff == row - i) {
                is_safe = false;
                break;
            }
        }
        if (is_safe) {
            queens[row] = col;
            solve_n_queens(queens, row + 1, n);
        }
    }
}
int main() {
    int n = 4;
    int queens[n];
    solve_n_queens(queens, 0, n);
    return 0;
}



kahns algorithm

#include <iostream>
#include <queue>
using namespace std;

void topologicalSort(int** adj, int V) {
    int* inDegree = new int[V];
    for (int i = 0; i < V; i++) {
        inDegree[i] = 0;
    }
    queue<int> q;
    for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
            if (adj[i][j] == 1) {
                inDegree[j]++;
            }
        }
    }
    for (int i = 0; i < V; i++) {
        if (inDegree[i] == 0) {
            q.push(i);
        }
    }
    while (!q.empty()) {
        int curr = q.front();
        q.pop();
        cout << curr << " ";
        for (int i = 0; i < V; i++) {
            if (adj[curr][i] == 1) {
                inDegree[i]--;
                if (inDegree[i] == 0) {
                    q.push(i);
                }
            }
        }
    }
}

int main() {
    int V, E;
    cin >> V >> E;
    int** adj = new int*[V];
    for (int i = 0; i < V; i++) {
        adj[i] = new int[V];
        for (int j = 0; j < V; j++) {
            adj[i][j] = 0;
        }
    }
    for (int i = 0; i < E; i++) {
        int u, v;
        cin >> u >> v;
        adj[u][v] = 1;
    }
    topologicalSort(adj, V);

    return 0;
}



